#!/usr/bin/env python3
import os, sys
import yaml
import argparse
import subprocess
import socket
import time
from collections.abc import Mapping, Sequence
from ldmsd.parser_util import *
from maestro.maestro_util import *

class MaestroCtrl(YamlCfg):
    def emit_value(self, path, value):
        try:
            res = client.put(path, str(value))
        except Exception as e:
            print("Error {0} setting {1} : {2}".format(str(e), path, str(value)))

    def check_key(self, key):
        # Handle forward slash in keys e.g. endpoints containing "/" in the name
        try:
            if '/' in key:
                print(f'Error: "/" is not a supported character in key name {key}')
                sys.exit(1)
            return key
        except Exception as e:
            print(str(e))

    def walk(self, obj, path=''):
        if obj is None:
            if path.split("/")[-1] in CORE_ATTRS:
                print(f'{path.split("/")[-1]} not present in ldms yaml configuration file.\nContinuing..')
        elif isinstance(obj, Mapping):
            for key in obj:
                safe_key = self.check_key(key)
                self.walk(obj[key], '{0}/{1}'.format(path, safe_key))
        elif isinstance(obj, Sequence):
            if isinstance(obj, (str, bytearray)):
                self.emit_value(path, obj)
            else:
                item = 0
                for v in obj:
                    # we want keys to be returned in numerical order which requires z-fill
                    self.walk(v, path + '/{0:06}'.format(item))
                    item += 1
        elif obj:
            self.emit_value(path, obj)

    def save_config(self):
        try:
            self.client.delete_prefix('/' + self.name)
            self.walk(self.daemons, '/' + self.name + '/daemons')
            self.walk(self.advertisers, '/' + self.name + '/advertisers')
            self.walk(self.prdcr_listeners, '/' + self.name + '/prdcr_listeners')
            self.walk(self.aggregators, '/' + self.name + '/aggregators')
            self.walk(self.producers, '/' + self.name + '/producers')
            self.walk(self.updaters, '/' + self.name + '/updaters')
            self.walk(self.stores, '/' + self.name + '/stores')
            self.walk(self.samplers, '/' + self.name + '/samplers')
            self.walk(self.plugins, '/' + self.name + '/plugins')
            self.client.put('/'+self.name+'/last_updated', str(time.time()))
        except Exception as e:
            a, b, c = sys.exc_info()
            print(str(e)+' '+str(c.tb_lineno))
            return 1

    def local_mode(self, local_path):
        # Local mode uses hostname to help identify which daemon(s) to start
        hostname = socket.gethostname()
        local_list = {}
        fd = None
        match_host = False
        for dmn_grp in self.daemons:
            for dmn in self.daemons[dmn_grp]:
                auth_list = {}
                if hostname == self.daemons[dmn_grp][dmn]['addr']:
                    match_host = True
                    local_list[dmn] = self.daemons[dmn_grp][dmn]
                    local_list[dmn]['dmn_grp'] = dmn_grp
                    if dmn_grp in self.aggregators and dmn in self.aggregators[dmn_grp]:
                        try:
                            fd = open(f'{local_path}/{dmn}.conf', 'w+')
                            self.write_listeners(fd, dmn_grp, dmn, auth_list)
                            self.write_producers(fd, dmn_grp, dmn, auth_list)
                            self.write_stream_subscribe(fd, dmn_grp, dmn)
                            self.write_agg_plugins(fd, dmn_grp, dmn)
                            self.write_updaters(fd, dmn_grp)
                            self.write_stores(fd, dmn_grp)
                        except Exception as e:
                            print(f'Error {e}: writing ldms configuration files')
                    if fd:
                        fd.close()
                    if dmn_grp in self.samplers and dmn in self.samplers[dmn_grp]:
                        fd = open(f'{local_path}/{dmn}.conf', 'w+')
                        # TO DO: Refactor sampler config architecture to more easily reference appropriate groups
                        self.write_samplers(fd, dmn_grp)
                        self.write_listeners(fd, dmn_grp, dmn, auth_list)
                    if fd:
                        fd.close()
                    print(f'Starting {dmn}')
                    start_args = self.ldmsd_arg_list(local_path, dmn_grp, dmn)
                    local_list[dmn] = subprocess.Popen(start_args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        if match_host is False:
            print(f'{hostname} does not match any daemon hosts in the ldms configuration file')
        for dmn in local_list:
            local_list[dmn].wait()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="LDMS Monitoring Cluster Configuration")
    parser.add_argument("--ldms_config", metavar="FILE", required=True,
                        help="The ldmsd load balance domain configuration file. "
                        "This will not start the maestro "
                        "load balancer")
    parser.add_argument("--cluster", metavar="FILE",
                        help="The name of the etcd cluster configuration file")
    parser.add_argument("--prefix", metavar="STRING",
                        help="The prefix for the dumped aggregator configurations",
                        default="unknown")
    local = parser.add_mutually_exclusive_group()
    local.add_argument("--local", action='store_true', default=False, help="Start maestro_ctrl in local mode")
    parser.add_argument("--local_path", metavar="STRING",
                       help="The path for the generated local configuration files",
                       default=os.path.expanduser('~'), required=False)
    parser.add_argument("--generate-config-path", metavar="STRING", required=False,
                        help="Path to directory to store generated v4 configuration files for an entire LDMS cluster. "
                             "Samplers with similar configurations share a single configuration file. ",
                        default=False)
    parser.add_argument("--daemon_name", metavar="STRING", required=False,
                        default=False,
                        help="Daemon name to generate configuration from YAML file")
    parser.add_argument("--debug", action="store_true",
                        help="Enable debug information")
    args = parser.parse_args()
    if not args.debug:
        import sys
        sys.tracebacklimit=0
    config_fp = open(args.ldms_config)
    conf_spec = yaml.safe_load(config_fp)

    if args.cluster:
        # All keys in the DB are prefixed with the prefix name. So we can
        # have multiple monitoring hosted by the same consensus cluster.
        import etcd3
        if not args.prefix:
            print(f'"prefix" is required when using etcd')
        # Load the cluster configuration file. This configures the daemons
        # that support the key/value configuration database
        etcd_fp = open(args.cluster)
        etcd_spec = yaml.safe_load(etcd_fp)

        etcd_hosts = ()
        for h in etcd_spec['members']:
            etcd_hosts += (( h['host'], h['port'] ),)

        # Use the 1st host for now
        client = etcd3.client(host=etcd_hosts[0][0], port=etcd_hosts[0][1],
            grpc_options=[ ('grpc.max_send_message_length',16*1024*1024),
                       ('grpc.max_receive_message_length',16*1024*1024)])
    else:
        client = None
        args.prefix = None

    cluster = MaestroCtrl(client, args.prefix, conf_spec, args)

    if args.daemon_name:
        ldmsd_cfg_str = cluster.daemon_config(args.ldms_config, args.daemon_name.rstrip('0'))
        print(f'{ldmsd_cfg_str}')
        sys.exit(0)
    if args.local:
        cluster.local_mode(args.local_path)

    if args.generate_config_path:
        cluster.config_v4(args.generate_config_path)
        print("LDMSD v4 config files generated")
        sys.exit(0)

    # Replace existing configuration if etcd cluster specified
    if args.cluster:
        rc = cluster.save_config()
        if rc:
            print("Error saving ldms cluster configuration to etcd cluster.")
            sys.exit(0)
        print("LDMS cluster configuration saved to etcd cluster.")

    if not args.cluster and not args.prefix and not args.local and not args.generate_config_path:
        print(f'No action detected. Exiting...')

    sys.exit(0)
