#!/usr/bin/env python3
import os, sys
import errno
import yaml
import argparse
import json
import subprocess
import socket
import time
import itertools as it
from collections.abc import Mapping, Sequence
from maestro.maestro_util import *

class ClusterCtrl(object):
    def emit_value(self, path, value):
        try:
            res = client.put(path, str(value))
        except Exception as e:
            print("Error {0} setting {1} : {2}".format(str(e), path, str(value)))

    def check_key(self, key):
        # Handle forward slash in keys e.g. endpoints containing "/" in the name
        try:
            if '/' in key:
                print(f'Error: "/" is not a supported character in key name {key}')
                sys.exit(1)
            return key
        except Exception as e:
            print(str(e))

    def walk(self, obj, path=''):
        if obj is None:
            if path.split("/")[-1] in CORE_ATTRS:
                print(f'{path.split("/")[-1]} not present in ldms yaml configuration file.\nContinuing..')
        elif isinstance(obj, Mapping):
            for key in obj:
                safe_key = self.check_key(key)
                self.walk(obj[key], '{0}/{1}'.format(path, safe_key))
        elif isinstance(obj, Sequence):
            if isinstance(obj, (str, bytearray)):
                self.emit_value(path, obj)
            else:
                item = 0
                for v in obj:
                    # we want keys to be returned in numerical order which requires z-fill
                    self.walk(v, path + '/{0:06}'.format(item))
                    item += 1
        elif obj:
            self.emit_value(path, obj)

    def build_daemons(self, config):
        """Generate a daemon spec list from YAML config

        Builds a dictionary of endpoint definitions. The 'config' is a
        list of daemon specifications. Each daemon specification contains
        'names', 'host', and 'endpoint' attributes. All attributes are
        expanded per the slurm hostlist rules. The length of the
        expanded name-list, must equal the length of the expanded
        host-list.

        Example:

        daemons:
          - names : "agg-[1-10]"
            hosts : "node[1-10]"
            endpoints :
              - names : "node-[1-10]-[10002]
                ports : "[10002]"
                maestro_comm : True
                xprt : sock
                auth :
                  name : munge
                  plugin : munge

        results in the following host-spec dictionary:

        {
        "agg-[[1-3]-[10002]" : {
          "agg-1" : {
            "endpoints": {
              "node-1-10002" : { "host" : "node-1", "port" : 10002 },
              "node-2-10002" : { "host" : "node-2", "port" : 10002 },
              "node-3-10002" : { "host" : "node-3", "port" : 10002 },
              ...
            }
          }
        }

        """
        ep_dict = {}
        node_config = config['daemons']
        if type(node_config) is not list:
            print(f'{LDMS_YAML_ERR}')
            print(f'daemons {LIST_ERR}')
            print(f'e.g. daemons:')
            print(f'       - names : &l1-agg "l1-aggs-[1-8]"')
            print(f'         hosts : &l1-agg-hosts "node-[1-8]"')
            sys.exit()
        for spec in node_config:
            check_required([ 'names', 'endpoints', 'hosts' ],
                           spec, "daemons specification")
            hosts = expand_names(spec['hosts'])
            dnames = expand_names(spec['names'])
            hostnames = hosts
            if len(dnames) != len(hostnames):
                hosts = [ [host]*(len(dnames)//len(hostnames)) for host in hostnames ]
                hosts = list(it.chain.from_iterable(hosts))
            ep_names = []
            ep_ports = []
            if type(spec['endpoints']) is not list:
                print(f'{LDMS_YAML_ERR}')
                print(f'endpoints {LIST_ERR}')
                print(f'e.g endpoints :')
                print(f'      - names : &l1-agg-endpoints "node-[1-8]-[10101]"')
                print(f'        ports : &agg-ports "[10101]"')
                print(f'        maestro_comm : True')
                print(f'        xprt  : sock')
                print(f'        auth  :')
                print(f'          name : munge1')
                print(f'          plugin : munge')
                sys.exit()
            for endpoints in spec['endpoints']:
                check_required(['names','ports'],
                               endpoints, 'endpoint specification')
                cur_epnames = expand_names(endpoints['names'])
                ep_names.append(cur_epnames)
                cur_ports = expand_names(endpoints['ports'])
                _ports = cur_ports
                if len(cur_ports) != len(cur_epnames):
                    cur_ports = [ _ports for i in range(0, len(cur_epnames)//len(_ports)) ]
                    cur_ports = list(it.chain.from_iterable(cur_ports))
                ep_ports.append(cur_ports)
            ep_dict[spec['names']] = {}
            for dname, host in zip(dnames, hosts):
                ep_dict[spec['names']][dname] = {}
                ep_dict[spec['names']][dname]['addr'] = host
                ep_dict[spec['names']][dname]['endpoints'] = {}
                for ep_, ep_port, ep in zip(ep_names, ep_ports, spec['endpoints']):
                    port = ep_port.pop(0)
                    ep_name = ep_.pop(0)
                    xprt = check_opt('xprt', ep)
                    auth_name = check_opt('auth', ep)
                    auth_conf = check_opt('conf', ep)
                    plugin = check_opt('plugin', ep['auth'])
                    maestro_comm = parse_yaml_bool(check_opt('maestro_comm', ep))
                    h = {
                        'name' : ep_name,
                        'port' : port,
                        'xprt' : xprt,
                        'maestro_comm' : maestro_comm,
                        'auth' : { 'name' : auth_name, 'conf' : auth_conf, 'plugin' : plugin }
                    }
                    ep_dict[spec['names']][dname]['endpoints'][ep_name] = h
                    ep_dict[spec['names']][dname]['addr'] = host
        return ep_dict

    def build_aggregators(self, config):
        aggregators = {}
        if 'aggregators' not in config:
            return aggregators
        agg_conf = config['aggregators']
        if type(agg_conf) is not list:
            print(f'{LDMS_YAML_ERR}')
            print(f'aggregators {LIST_ERR}')
            print(f'e.g. aggregators:')
            print(f'       - daemons: "l1-aggregators"')
            print(f'         peers :')
            print(f'           - daemons : "samplers"')
            print(f'             ...     :  ...')
            return aggregators
        for agg_spec in agg_conf:
            check_required([ 'daemons' ],
                           agg_spec, "aggregator specification")
            names = expand_names(agg_spec['daemons'])
            group = agg_spec['daemons']
            plugins = check_opt('plugins', agg_spec)
            daemons_ = None
            for daemons in config['daemons']:
                if group == daemons['names']:
                    daemons_ = daemons
            if daemons_ is None:
                raise ValueError(f"No daemons matched matched daemon key {group}")
            if group not in aggregators:
                aggregators[group] = {}
            subscribe = check_opt('subscribe', agg_spec)
            if subscribe:
                for stream in subscribe:
                    check_required([ 'stream', 'regex' ], stream, "stream specification")
            for name in names:
                aggregators[group][name] = { 'state' : 'stopped' } # 'running', 'error'
                if subscribe:
                    aggregators[group][name]['subscribe'] = subscribe
                if plugins:
                    aggregators[group][name]['plugins'] = plugins
        return aggregators

    def build_producers(self, config):
        """
        Return a dictionary keyed by the group name. Each dictionary
        entry is a list of producers in that group.
        """
        producers = {}
        for agg in config.get('aggregators', []):
            if 'peers' not in agg:
                continue
            if type(agg['peers']) is not list:
                print(f'{LDMS_YAML_ERR}')
                print(f'peers {LIST_ERR}')
                print(f'e.g. peers:')
                print(f'       - daemons: "samplers"')
                print(f'         endpoints : "sampler-endpoints"')
                print(f'         ...       : ...')
                continue
            for prod in agg['peers']:
                check_required([ 'endpoints', 'updaters',
                                 'reconnect', 'type', ],
                               prod, '"producer" entry')
                # Use endpoints for producer names and remove names attribute?
                if prod['daemons'] not in self.daemons:
                    dmn_grps = prod['daemons'].split(',')
                    eps = prod['endpoints'].split(',')
                else:
                    dmn_grps = [ prod['daemons'] ]
                    eps = [ prod['endpoints'] ]
                for daemons, endpoints in zip(dmn_grps, eps):
                    names = expand_names(endpoints)
                    endpoints = expand_names(endpoints)
                    group = agg['daemons']
                    smplr_dmns = expand_names(daemons)
                    if group not in producers:
                        producers[group] = {}

                    upd_spec = prod['updaters']
                    # Expand and generate all the producers
                    typ = prod['type']
                    reconnect = cvt_intrvl_str_to_us(prod['reconnect'])
                    ports_per_dmn = len(endpoints) / len(smplr_dmns)
                    ppd = ports_per_dmn
                    try:
                        for name in names:
                            if ppd > 1:
                                smplr_dmn = smplr_dmns[0]
                                ppd -= 1
                            else:
                                smplr_dmn = smplr_dmns.pop(0)
                                ppd = ports_per_dmn
                            endpoint = endpoints.pop(0)
                            prod = {
                                'daemon'    : smplr_dmn,
                                'dmn_grp'   : daemons,
                                'name'      : name,
                                'endpoint'  : endpoint,
                                'type'      : typ,
                                'group'     : group,
                                'reconnect' : reconnect,
                                'updaters'  : upd_spec
                            }
                            producers[group][endpoint] = prod
                    except:
                        print(f'Error building producer config:\n'\
                              f'Please ensure "endpoints" is configured to the correct number of ports specified.')
        return producers

    def build_updaters(self, config):
        """
        Return a dictionary based on the aggregator. Each dictionary
        entry is a list of updaters in that group.
        """
        updaters = {}
        updtr_cnt = 0
        for agg in config.get('aggregators', []):
            if 'peers' not in agg:
                continue
            for prod in agg['peers']:
                if type(prod['updaters']) is not list:
                    print(f'Error parsing ldms_config yaml file')
                    print(f'Updater spec must be a list of dictionaries, specified with "-" designator in the ldms_config yaml file')
                    print(f'e.g. updaters:')
                    print(f'       - mode     : pull')
                    print(f'         interval : "1.0s"')
                    print(f'         sets     :')
                    print(f'           - regex : ".*"')
                    print(f'             field : inst')
                    continue
                for updtr_spec in prod['updaters']:
                    check_required([ 'interval', 'sets', ],
                                   updtr_spec, '"updater" entry')
                    group = agg['daemons']
                    if group not in updaters:
                        updaters[group] = {}
                    grp_updaters = updaters[group]
                    updtr_name = f'updtr_{updtr_cnt}'
                    if updtr_name in grp_updaters:
                        raise ValueError(f"Duplicate updater name '{updtr_name}''. "\
                                         f"An updater name must be unique within the group")
                    updtr = {
                        'name'      : updtr_name,
                        'interval'  : cvt_intrvl_str_to_us(updtr_spec['interval']),
                        'group'     : agg['daemons'],
                        'sets'      : updtr_spec['sets'],
                        'producers' : [{ 'regex' : '.*' }]
                    }
                    if 'offset' in updtr_spec:
                        updtr['offset'] = cvt_intrvl_str_to_us(updtr_spec['offset'])
                    if 'mode' in updtr_spec:
                        updtr['mode'] = updtr_spec['mode']
                    else:
                        updtr['mode'] = 'pull'
                    grp_updaters[updtr_name] = updtr
                    updtr_cnt += 1
        return updaters

    def build_stores(self, config):
        """
        Return a dictionary keyed by the group name. Each dictionary
        entry is a list of stores in that group.
        """
        if 'stores' not in config:
            return None
        stores = {}
        if type(config['stores']) is not list:
            print(f'{LDMS_YAML_ERR}')
            print(f'store {LIST_ERR}')
            print(f'e.g. stores:')
            print(f'       - name      : sos-meminfo')
            print(f'         daemons   : "l1-aggregators"')
            print(f'         container : ldms_data')
            print(f'         ...       : ...')
            return None
        for store_spec in config['stores']:
            check_required([ 'name', 'plugin', 'container' ],
                           store_spec, '"store" entry')
            decomp = check_opt('decomposition', store_spec)
            if not decomp:
                check_required(['schema'], store_spec, '"store" entry')
            schema = check_opt('schema', store_spec)
            regex = check_opt('regex', store_spec)
            if decomp and not schema and not regex:
                raise ValueError("Decomposition plugin configuration requires either"
                                 " 'schema' or 'regex' attribute'")
            group = store_spec['daemons']
            if group not in stores:
                stores[group] = {}
            grp_stores = stores[group]
            store_name = store_spec['name']
            if store_name in grp_stores:
                raise ValueError(f"Duplicate store name '{store_name}''. "
                            "A store name must be unique within the group")
            check_required(['name', 'config'],
                           store_spec['plugin'],
                           '"store plugin" entry')
            grp_stores[store_name] = store_spec
        return stores

    def build_samplers(self, config):
        """
        Generate samplers from YAML config.
        Return a dictionary keyed by the samplers group name. Each dictionary
        entry is a single ldms daemon's sampler configuration.
        """
        if 'samplers' not in config:
            return None
        smplrs = {}
        if type(config['samplers']) is not list:
            print(f'{LDMS_YAML_ERR}')
            print(f'samplers {LIST_ERR}')
            print(f'e.g. samplers:')
            print(f'       - daemons : "samplers"')
            print(f'         plugins :')
            print(f'           - name        : meminfo')
            print(f'             interval    : "1.0s"')
            print(f'              offset      : "0s"')
            print(f'              config :')
            print(f'                schema : meminfo')
            print(f'                component_id : "10001"')
            print(f'                producer : "node-1"')
            print(f'                perm : "0777"')
            return None
        for smplr_spec in config['samplers']:
            check_required([ 'daemons', 'plugins' ],
                           smplr_spec, '"sampler" entry')
            for plugin in smplr_spec['plugins']:
                check_required(['name'], plugin, 'plugin entry')
            smplrs[smplr_spec['daemons']] = smplr_spec
        return smplrs

    def build_plugins(self, config):
        """
        Generate plugins to load from a YAML config.
        Return a dictionary keyed by the plugin's group name. Each dictionary entry
        is a single plugin's configuration.
        """
        if 'plugins' not in config:
            return None
        plugins = {}
        for plugn_spec in config['plugins']:
            check_required([ 'name', 'config' ],
                           plugn_spec, '"plugin" entry')
            group = plugn_spec['daemons']
            if group not in plugins:
                plugins[group] = {}
            grp_plugins = plugins[group]
            plugin_name = plugn_spec['name']
            if plugin_name in grp_plugins:
                raise ValueError(f'Duplicate plugin name "{plugin_name}". '
                                  'Plugin must be unique within a group.')
            grp_plugins[plugin_name] = plugn_spec
        return plugins

    def __init__(self, client, name, cluster_config):
        """
        """
        self.client = client
        self.name = name
        self.cluster_config = cluster_config
        self.daemons = self.build_daemons(cluster_config)
        self.aggregators = self.build_aggregators(cluster_config)
        self.producers = self.build_producers(cluster_config)
        self.updaters = self.build_updaters(cluster_config)
        self.stores = self.build_stores(cluster_config)
        self.samplers = self.build_samplers(cluster_config)
        self.plugins = self.build_plugins(cluster_config)

    def commit(self):
        pass

    def save_config(self):
        try:
            self.client.delete_prefix('/' + self.name)
            self.walk(self.daemons, '/' + self.name + '/daemons')
            self.walk(self.aggregators, '/' + self.name + '/aggregators')
            self.walk(self.producers, '/' + self.name + '/producers')
            self.walk(self.updaters, '/' + self.name + '/updaters')
            self.walk(self.stores, '/' + self.name + '/stores')
            self.walk(self.samplers, '/' + self.name + '/samplers')
            self.walk(self.plugins, '/' + self.name + '/plugins')
            self.client.put('/'+self.name+'/last_updated', str(time.time()))
        except Exception as e:
            a, b, c = sys.exc_info()
            print(str(e)+' '+str(c.tb_lineno))
            return 1

    def local_mode(self, local_path):
        # Local mode uses hostname to help identify which daemon(s) to start
        hostname = socket.gethostname()
        local_list = {}
        fd = None
        match_host = False
        for dmn_grp in self.daemons:
            for dmn in self.daemons[dmn_grp]:
                if hostname == self.daemons[dmn_grp][dmn]['addr']:
                    match_host = True
                    local_list[dmn] = self.daemons[dmn_grp][dmn]
                    local_list[dmn]['dmn_grp'] = dmn_grp
                    if dmn_grp in self.aggregators and dmn in self.aggregators[dmn_grp]:
                        try:
                            fd = open(f'{local_path}/{dmn}.conf', 'w+')
                            self.write_listeners(fd, dmn_grp, dmn)
                            self.write_producers(fd, dmn_grp, dmn)
                            self.write_stream_subscribe(fd, dmn_grp, dmn)
                            self.write_agg_plugins(fd, dmn_grp, dmn)
                            self.write_updaters(fd, dmn_grp)
                            self.write_stores(fd, dmn_grp)
                        except Exception as e:
                            print(f'Error {e}: writing ldms configuration files')
                    if fd:
                        fd.close()
                    if dmn_grp in self.samplers:
                        fd = open(f'{local_path}/{dmn}.conf', 'w+')
                        # TO DO: Refactor sampler config architecture to more easily reference appropriate groups
                        self.write_samplers(fd, dmn_grp)
                        self.write_listeners(fd, dmn_grp, dmn)
                    if fd:
                        fd.close()
                    print(f'Starting {dmn}')
                    start_args = self.ldmsd_arg_list(local_path, dmn_grp, dmn)
                    local_list[dmn] = subprocess.Popen(start_args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        if match_host is False:
            print(f'{hostname} does not match any daemon hosts in the ldms configuration file')
        for dmn in local_list:
            local_list[dmn].wait()

    def ldmsd_arg_list(self, local_path, dmn_grp, dmn):
        start_list = [ 'ldmsd' ]
        for ep in self.daemons[dmn_grp][dmn]['endpoints']:
            if self.daemons[dmn_grp][dmn]['endpoints'][ep]['maestro_comm'] is True:
                ep_ = self.daemons[dmn_grp][dmn]['endpoints'][ep]
                start_list.append('-x')
                start_list.append(f'{ep_["xprt"]}:{ep_["port"]}')
                auth = check_opt('auth', ep_)
                if auth:
                    auth_plugin = check_opt('plugin', ep_['auth'])
                    auth_opt = check_opt('conf', ep_)
                    start_list.append('-a')
                    start_list.append(auth_plugin)
                    if auth_opt:
                        if len(auth_opt.split('=')) < 2:
                            auth_opt = f'conf={auth_opt}'
                        start_list.append('-A')
                        start_list.append(auth_opt)
        start_list.append('-c')
        start_list.append(f'{local_path}/{dmn}.conf')
        start_list.append('-r')
        start_list.append(f'{local_path}/{dmn}.pid')
        start_list.append('-l')
        start_list.append(f'{local_path}/{dmn}.log')
        start_list.append(f'-F')
        return start_list

    def write_listeners(self, fd, dmn_grp, dmn_name):
        for endp in self.daemons[dmn_grp][dmn_name]['endpoints']:
            ep = self.daemons[dmn_grp][dmn_name]['endpoints'][endp]
            if ep['maestro_comm'] is False:
                auth = check_opt
                auth = check_opt('auth', ep)
                auth_opt = check_opt('conf', ep)
                if auth:
                    plugin = check_opt('plugin', ep['auth'])
                    fd.write(f'auth_add name={auth}')
                    self.write_opt_attr(fd, 'plugin', plugin, endline=False)
                    self.write_opt_attr(fd, 'conf', auth_opt)
                fd.write(f'listen xprt={ep["xprt"]} port={ep["port"]}')
                self.write_opt_attr(fd, 'auth', auth, endline=False)
                self.write_opt_attr(fd, 'conf', auth_opt)

    def write_opt_attr(self, fd, attr, val, endline=True):
        # Include leading space
        if val is not None:
            fd.write(f' {attr}={val}')
        if endline:
            fd.write(f'\n')

    def write_producers(self, fd, group_name, dmn):
        if group_name in self.producers:
            ''' Balance samplers across aggregators '''
            ppd = -(len(self.producers[group_name]) // -len(self.aggregators[group_name].keys()))
            rem = len(self.producers[group_name]) % len(self.aggregators[group_name].keys())
            prdcrs = list(self.producers[group_name].keys())
            aggs = list(self.daemons[group_name].keys())
            agg_idx = int(aggs.index(dmn))
            prdcr_idx = int(ppd * agg_idx)
            prod_group = prdcrs[prdcr_idx:prdcr_idx+ppd]
            i = 0
            auth = None
            auths = {}
            for ep in prod_group:
                producer = self.producers[group_name][ep]
                auth = check_opt('auth', self.daemons[producer['dmn_grp']][producer['daemon']]['endpoints'][ep])
                auth_opt = check_opt('conf', self.daemons[producer['dmn_grp']][producer['daemon']]['endpoints'][ep])
                if auth in auths:
                    continue
                else:
                    auths[auth] = { 'conf' : auth_opt }
            for auth in auths:
                plugin = check_opt('plugin', self.daemons[producer['dmn_grp']][producer['daemon']]['endpoints'][ep]['auth'])
                if plugin is None:
                    print(f'Please specify auth plugin type for producer "{producer["daemon"]}" with auth name "{auth}"\n'\
                           'configuration file generation will continue, but auth will likely be denied.\n')
                    plugin = auth
                fd.write(f'auth_add name={auth} plugin={plugin}')
                self.write_opt_attr(fd, 'conf', auths[auth]['conf'])
            for ep in prod_group:
                regex = False
                producer = self.producers[group_name][ep]
                pname = producer['name']
                port = self.daemons[producer['dmn_grp']][producer['daemon']]['endpoints'][ep]['port']
                xprt = self.daemons[producer['dmn_grp']][producer['daemon']]['endpoints'][ep]['xprt']
                hostname = self.daemons[producer['dmn_grp']][producer['daemon']]['addr']
                auth = check_opt('auth', self.daemons[producer['dmn_grp']][producer['daemon']]['endpoints'][ep])
                ptype = producer['type']
                interval = producer['reconnect']
                fd.write(f'prdcr_add name={pname} '+
                         f'host={hostname} '+
                         f'port={port} '+
                         f'xprt={xprt} '+
                         f'type={ptype} '+
                         f'interval={interval}')
                self.write_opt_attr(fd, 'auth', auth)
                last_sampler = pname
                if 'regex' in producer:
                    regex = True
                    fd.write(f'prdcr_start_regex regex={producer["regex"]}\n')
                if not regex:
                    fd.write(f'prdcr_start_regex regex=.*\n')

    def write_samplers(self, fd, smplr_group):
        for sampler in self.samplers[smplr_group]['plugins']:
            hostname = socket.gethostname()
            cfg_args = { 'producer'     : f'{hostname}',
                         'instance'     : f'{hostname}/{sampler["name"]}',
                         'component_id' : '${LDMS_COMPONENT_ID}' }
            for attr in sampler['config']:
                if attr == 'name' or attr == 'interval':
                    continue
                cfg_args[attr] = sampler['config'][attr]

            sname = sampler['name']
            cfg_str = parse_to_cfg_str(cfg_args)
            interval = cvt_intrvl_str_to_us(sampler['interval'])
            fd.write(f'load name={sname}\n')
            fd.write(f'config name={sname} {cfg_str}\n')
            fd.write(f'start name={sname} interval={interval}')
            offset = check_opt('offset', sampler)
            self.write_opt_attr(fd, 'offset', offset)

    def write_sampler_plugins(self, group_name):
        if self.plugins != None:
            if group_name in self.plugins:
                fd = open(f'{path}/{group_name}-samplers.conf', 'w+')
                for plugin in self.plugins[group_name]:
                    cfg_str = parse_to_cfg_str(self.plugins[group_name][plugin]['config'])
                    fd.write(f'load name={plugin}\n')
                    fd.write(f'config name={plugin} {cfg_str}\n\n')
                fd.close()

    def write_stream_subscribe(self, fd, group_name, agg):
        subscribe = check_opt('subscribe', self.aggregators[group_name][agg])
        if subscribe:
            for stream in subscribe:
                regex = check_opt('regex', stream)
                if regex is None:
                    regex = '.*'
                fd.write(f'prdcr_subscribe stream={stream["stream"]} '\
                         f'regex={regex}\n')

    def write_aggregators(self, path, group_name):
        # Agg config
        try:
            ''' "Balance" agg configuration if all samplers are included in each aggregator '''
            if group_name not in self.aggregators:
                return 0
            for agg in self.aggregators[group_name]:
                fd = open(f'{path}/{agg}.conf', 'w+')
                self.write_listeners(fd, group_name, agg)
                self.write_producers(fd, group_name, agg)
                self.write_stream_subscribe(fd, group_name, agg)
                self.write_agg_plugins(fd, group_name, agg)
                self.write_updaters(fd, group_name)
                self.write_stores(fd, group_name)
        except Exception as e:
            ea, eb, ec = sys.exc_info()
            print('Agg config Error: '+str(e)+' Line:'+str(ec.tb_lineno))
            raise ValueError

    def write_agg_plugins(self, fd, group_name, agg):
        # Write independent plugin configuration for group <group_name>
        plugins = check_opt('plugins', self.aggregators[group_name][agg])
        if plugins is not None:
            for plugin in plugins:
                cfg_str = parse_to_cfg_str(plugin['config'])
                fd.write(f'load name={plugin["name"]}\n')
                fd.write(f'config name={plugin["name"]} {cfg_str}\n\n')

    def write_updaters(self, fd, group_name):
        if group_name in self.updaters:
            updtr_group = self.updaters[group_name]
            for updtr in updtr_group:
                interval = cvt_intrvl_str_to_us(updtr_group[updtr]['interval'])
                updtr_str = f'updtr_add name={updtr_group[updtr]["name"]} '
                if 'mode' in updtr_group[updtr]:
                    mode = updtr_group[updtr]['mode']
                else:
                    mode = 'pull'
                # Check mode
                if mode == 'push':
                    updtr_str = f'{updtr_str} push=True'
                elif mode == 'onchange':
                    updtr_str = f'{updtr_str} push=onchange'
                elif mode == 'auto_interval' or 'auto':
                    updtr_str = f'{updtr_str} auto_interval=True'
                fd.write(f'{updtr_str} '+
                         f'interval={interval}')
                offset = check_opt('offset', updtr_group[updtr])
                self.write_opt_attr(fd, 'offset', offset)
                for prod in updtr_group[updtr]['producers']:
                    fd.write(f'updtr_prdcr_add name={updtr_group[updtr]["name"]} '+
                             f'regex={prod["regex"]}\n')
                fd.write(f'updtr_start name={updtr_group[updtr]["name"]}\n')

    def write_stores(self, fd, group_name):
        if group_name in self.stores:
            store_group = self.stores[group_name]
            loaded_plugins = []
            for store in store_group:
                if store_group[store]["plugin"]["name"] not in loaded_plugins:
                    fd.write(f'load name={store_group[store]["plugin"]["name"]}\n')
                    fd.write(f'config name={store_group[store]["plugin"]["name"]} '+
                             f'{parse_to_cfg_str(store_group[store]["plugin"]["config"])}\n')
                    loaded_plugins.append(store_group[store]["plugin"]["name"])
                strgp_add = f'strgp_add name={store} plugin={store_group[store]["plugin"]["name"]} '
                strgp_add += f'container={store_group[store]["container"]} '
                strgp_add += f'schema={store_group[store]["schema"]}'
                fd.write(strgp_add)
                flush = check_opt('flush', store_group[store])
                self.write_opt_attr(fd, 'flush', flush)
                fd.write(f'strgp_start name={store}\n')

    def config_v4(self, path):
        """
        Read the group configuration from ETCD and generate a version 4 LDMSD configuration
        This configuration assumes that the environemnt variables COMPONENT_ID, HOSTNAME
        all exist on the machines relevant to the ldmsd cluster.
        """
        for group_name in self.daemons:
            # Sampler config
            if self.samplers != None:
                try:
                    self.write_sampler_plugins(group_name)
                    # TO DO: Refactor sampler config architecture to more easily reference appropriate groups
                    if group_name in self.samplers:
                        fd = open(f'{path}/{group_name}-samplers.conf', 'w+')
                        self.write_samplers(fd, group_name)
                        for dmn_name in self.daemons[group_name]:
                            self.write_listeners(fd, group_name, dmn_name)
                    if fd:
                        fd.close()
                except Exception as e:
                    a, b, d = sys.exc_info()
                    print(f'Error generating sampler configuration: {str(e)} {str(d.tb_lineno)}')
                    raise ValueError
            else:
                print(f'"samplers" not found in configuration file. Skipping...')

            # Write aggregators in daemon group
            self.write_aggregators(path, group_name)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="LDMS Monitoring Cluster Configuration")
    parser.add_argument("--ldms_config", metavar="FILE", required=True,
                        help="The ldmsd load balance domain configuration file. "
                        "This will not start the maestro "
                        "load balancer")
    parser.add_argument("--cluster", metavar="FILE",
                        help="The name of the etcd cluster configuration file")
    parser.add_argument("--prefix", metavar="STRING",
                        help="The prefix for the dumped aggregator configurations",
                        default="unknown")
    local = parser.add_mutually_exclusive_group()
    local.add_argument("--local", action='store_true', default=False, help="Start maestro_ctrl in local mode")
    parser.add_argument("--local_path", metavar="STRING",
                       help="The path for the generated local configuration files",
                       default=os.path.expanduser('~'), required=False)
    parser.add_argument("--generate-config-path", metavar="STRING", required=False,
                        default=False)
    parser.add_argument("--version", metavar="VERSION",
                        help="The OVIS version for the output syntax (4 or 5), default is 4",
                        default=4)
    args = parser.parse_args()

    config_fp = open(args.ldms_config)
    conf_spec = yaml.safe_load(config_fp)

    if args.cluster:
        # All keys in the DB are prefixed with the prefix name. So we can
        # have multiple monitoring hosted by the same consensus cluster.
        import etcd3
        if not args.prefix:
            print(f'"prefix" is required when using etcd')
        # Load the cluster configuration file. This configures the daemons
        # that support the key/value configuration database
        etcd_fp = open(args.cluster)
        etcd_spec = yaml.safe_load(etcd_fp)

        etcd_hosts = ()
        for h in etcd_spec['members']:
            etcd_hosts += (( h['host'], h['port'] ),)

        # Use the 1st host for now
        client = etcd3.client(host=etcd_hosts[0][0], port=etcd_hosts[0][1],
            grpc_options=[ ('grpc.max_send_message_length',16*1024*1024),
                       ('grpc.max_receive_message_length',16*1024*1024)])
    else:
        client = None
        args.prefix = None

    cluster = ClusterCtrl(client, args.prefix, conf_spec)

    if args.local:
        cluster.local_mode(args.local_path)

    if args.generate_config_path:
        cluster.config_v4(args.generate_config_path)
        print("LDMSD v4 config files generated")
        sys.exit(0)

    # Replace existing configuration if etcd cluster specified
    if args.cluster:
        rc = cluster.save_config()
        if rc:
            print("Error saving ldms cluster configuration to etcd cluster.")
            sys.exit(0)
        print("LDMS cluster configuration saved to etcd cluster.")

    if not args.cluster and not args.prefix and not args.local and not args.generate_config_path:
        print(f'No action detected. Exiting...')

    sys.exit(0)
